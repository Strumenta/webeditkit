import de.itemis.mps.gradle.BuildLanguages
import de.itemis.mps.gradle.TestLanguages
import de.itemis.mps.gradle.GenerateLibrariesXml
import de.itemis.mps.gradle.RunAntScript
import groovy.json.JsonSlurper
import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.0.85.03fbeda'
        classpath 'com.bmuschko:gradle-izpack-plugin:3.0'
    }
}

plugins {
  id 'org.ajoberstar.grgit' version '4.0.2'
}


ext.mpsVersion = '2019.3.1'
ext.mbeddrPlatformVersion = '2019.3.22230.6f9f955'
ext.iets3opensourceVersion = '2019.3.4458.852c81c'
ext.mpsserverVersion = '1.0.1-alpha9'

configurations {
	mps
	mpsArtifacts
	ant_lib
	libs
	distribution
}

dependencies {
	ant_lib "org.apache.ant:ant-junit:1.10.1"
	mps "com.jetbrains:mps:$mpsVersion"
	mpsArtifacts "com.strumenta.mpsserver:mpsserver-core:$mpsserverVersion"
}

repositories {
	mavenCentral()
	maven {
		url 'https://projects.itemis.de/nexus/content/groups/OS/'
	}
	maven {
		url 'https://dl.bintray.com/strumenta/strumenta-oss-maven'
	}
}



if (!hasProperty("jdk_home")) {
	def java_home = System.properties['java.home']
	def jdk_home = java_home

	// In JDK >=11 we look for javac
	if (!file("$jdk_home/bin/javac").isFile() && !file("$jdk_home/bin/javac.exe").isFile()) {
		// In JDK <11 we look for the tools.jar
		if (!file("$jdk_home/lib/tools.jar").isFile()) {
			jdk_home = jdk_home + "/.."
		}
		if (!file("$jdk_home/lib/tools.jar").isFile()) {
			throw new GradleException("Not finding the JDK...")
		}
	}

	ext.jdk_home = jdk_home
}

ext.artifactsDir = new File(rootDir, 'artifacts')
ext.mpsDir = project.hasProperty('mpsPath') ? new File("${mpsPath}") : new File(artifactsDir, 'mps')
ext.distributionDependenciesDir = new File(buildDir, 'distribution-dependencies')
ext.buildScriptClasspath = project.configurations.ant_lib.fileCollection({
	true
}) + project.files("$project.jdk_home/lib/tools.jar")
ext.antScriptArgs =  [
	"-Dmps.home=${mpsDir.getAbsolutePath()}",
	"-Dartifacts.root=${artifactsDir.getAbsolutePath()}",
	"-Dmps.macro.mpsserver.home=${new File(artifactsDir, 'MpsServer-server').getAbsolutePath()}",
	"-Dmpsserver.home=${new File(artifactsDir, 'MpsServer-server').getAbsolutePath()}"
]

task resolveMpsArtifacts(type: Copy) {
	from {
		configurations.mpsArtifacts.resolve().collect { zipTree(it) }
	}
	into artifactsDir
}

task justRunMpsServerLauncher(type: RunAntScript, dependsOn: []) {
	targets = ['run.com.strumenta.mpsserver.launcher']
	scriptArgs = antScriptArgs
	scriptClasspath = buildScriptClasspath
	script new File('build-launcher.xml')
}

task cloneMpsServer() {
    doLast {
        Grgit.clone(dir: file('mpsserver-clone'), uri: 'https://github.com/Strumenta/MPSServer.git')
    }
}