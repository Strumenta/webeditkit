package ExampleLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Project__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x76323df9b7464f38L, 0xa295fd089a3e40d4L, 0x67a20439b3b5dfe0L, "ExampleLanguage.structure.Project");

  public static final SMethod<String> standardID_id6uy13ANHETh = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("standardID").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6uy13ANHETh").build();
  public static final SMethod<Void> assignStandardID_id6uy13ANHEIb = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("assignStandardID").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6uy13ANHEIb").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(standardID_id6uy13ANHETh, assignStandardID_id6uy13ANHEIb);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String standardID_id6uy13ANHETh(@NotNull SNode __thisNode__) {
    SNode client = SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.Client$SY, false, false);
    String clientPart = SPropertyOperations.getString(client, PROPS.name$tAp1).substring(0, 2).toUpperCase();
    String projectPart = SPropertyOperations.getString(__thisNode__, PROPS.name$tAp1).substring(0, 2).toUpperCase();
    return clientPart + projectPart;
  }
  /*package*/ static void assignStandardID_id6uy13ANHEIb(@NotNull SNode __thisNode__) {
    SPropertyOperations.assign(__thisNode__, PROPS.id$qVKg, Project__BehaviorDescriptor.standardID_id6uy13ANHETh.invoke(__thisNode__));
  }

  /*package*/ Project__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) standardID_id6uy13ANHETh(node));
      case 1:
        assignStandardID_id6uy13ANHEIb(node);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Client$SY = MetaAdapterFactory.getConcept(0x76323df9b7464f38L, 0xa295fd089a3e40d4L, 0x67a20439b3b5e448L, "ExampleLanguage.structure.Client");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty id$qVKg = MetaAdapterFactory.getProperty(0x76323df9b7464f38L, 0xa295fd089a3e40d4L, 0x67a20439b3b5dfe0L, 0x67a20439b3b649b1L, "id");
  }
}
